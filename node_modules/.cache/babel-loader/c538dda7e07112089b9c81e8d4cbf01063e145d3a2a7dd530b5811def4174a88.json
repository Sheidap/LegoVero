{"ast":null,"code":"// src/data/minifigures.js\n\nconst minifigures = [];\n\n// Ejemplo para las Series 1–3 (los nombres son reales de la Serie 1, Serie 2 y Serie 3)\nconst seriesData = {\n  \"Serie 1\": [\"Tribal Hunter\", \"Cheerleader\", \"Caveman\", \"Circus Clown\", \"Zombie\", \"Skater\", \"Robot\", \"Demolition Dummy\", \"Magician\", \"Wrestler\", \"Nurse\", \"Ninja\", \"Spaceman\", \"Forestman\", \"Deep Sea Diver\", \"Cowboy\"],\n  \"Serie 2\": [\n  // nombres reales de la serie 2: Sea Retriever, Spartan Thrower, Karate Champion, Disco Dancer, Puzzle Hunter, Target Racer, Track Day Racer, Film Director, Waterpark Worker, Diamond Miner, Dragon Suit Guy, Karate Champion etc.\n  \"Sea Retriever\", \"Disco Dancer\", \"Puzzle Hunter\", \"Spartan Warrior\", \"Karate Champion\", \"Target Racer\", \"Track Day Racer\", \"Film Director\", \"Waterpark Worker\", \"Dragon Suit Guy\", \"Diamond Miner\", \"Beach Babe\", \"Cyclist\", \"Gorilla Suit Guy\", \"Mountain Climber\", \"Skier\"],\n  \"Serie 3\": [\n  // solo nombres de ejemplo\n  \"Gorilla Suit Guy\", \"Elf\", \"Knight\", \"Pirate\", \"Ninja Master\", \"Wrestler\", \"Cyclist\", \"Wizard\", \"Fairy\", \"Chef\", \"Explorer\", \"Plumber\", \"Astronaut\", \"Nurse\", \"Lumberjack\", \"Jester\"],\n  // ... similar para Series 4–15 (puedes completar)\n  \"Serie 4\": [\n  // solo nombres de ejemplo\n  \"painter\", \"scientist\", \"nuclear officer\", \"hockey player\", \"ice skater\", \"kimono\", \"Gnome \", \"monster \", \"musketeer\", \"rocker\", \"Skateboard\", \"ootball player\", \"surfer gir\", \"Viking\", \"werewolf\"]\n};\nlet id = 1;\nObject.entries(seriesData).forEach(([serie, nombres]) => {\n  nombres.slice(0, 16).forEach((nombre, index) => {\n    minifigures.push({\n      id: id++,\n      serie,\n      nombre,\n      año: 2010 + parseInt(serie.replace(/\\D/g, '')),\n      // aproximado\n      estado: \"\",\n      comentarios: \"\",\n      imagen: `/images/${serie.replace(\" \", \"\").toLowerCase()}-${index + 1}.png`\n    });\n  });\n});\n\n// Orden natural por número de serie\nminifigures.sort((a, b) => {\n  const numA = parseInt(a.serie.replace(/\\D/g, '')) || 0;\n  const numB = parseInt(b.serie.replace(/\\D/g, '')) || 0;\n  return numA - numB;\n});\nexport default minifigures;","map":{"version":3,"names":["minifigures","seriesData","id","Object","entries","forEach","serie","nombres","slice","nombre","index","push","año","parseInt","replace","estado","comentarios","imagen","toLowerCase","sort","a","b","numA","numB"],"sources":["C:/Users/playw/OneDrive/Desktop/Vero Lego/lego-catalogo-mejorado/src/data/minifigures.js"],"sourcesContent":["// src/data/minifigures.js\n\nconst minifigures = [];\n\n// Ejemplo para las Series 1–3 (los nombres son reales de la Serie 1, Serie 2 y Serie 3)\nconst seriesData = {\n  \"Serie 1\": [\n    \"Tribal Hunter\", \"Cheerleader\", \"Caveman\", \"Circus Clown\",\n    \"Zombie\", \"Skater\", \"Robot\", \"Demolition Dummy\",\n    \"Magician\", \"Wrestler\", \"Nurse\", \"Ninja\",\n    \"Spaceman\", \"Forestman\", \"Deep Sea Diver\", \"Cowboy\"\n  ],\n  \"Serie 2\": [\n    // nombres reales de la serie 2: Sea Retriever, Spartan Thrower, Karate Champion, Disco Dancer, Puzzle Hunter, Target Racer, Track Day Racer, Film Director, Waterpark Worker, Diamond Miner, Dragon Suit Guy, Karate Champion etc.\n    \"Sea Retriever\", \"Disco Dancer\", \"Puzzle Hunter\", \"Spartan Warrior\",\n    \"Karate Champion\", \"Target Racer\", \"Track Day Racer\", \"Film Director\",\n    \"Waterpark Worker\", \"Dragon Suit Guy\", \"Diamond Miner\", \"Beach Babe\",\n    \"Cyclist\", \"Gorilla Suit Guy\", \"Mountain Climber\", \"Skier\"\n  ],\n  \"Serie 3\": [\n    // solo nombres de ejemplo\n    \"Gorilla Suit Guy\", \"Elf\", \"Knight\", \"Pirate\", \"Ninja Master\", \"Wrestler\",\n    \"Cyclist\", \"Wizard\", \"Fairy\", \"Chef\", \"Explorer\", \"Plumber\",\n    \"Astronaut\", \"Nurse\", \"Lumberjack\", \"Jester\"\n  ],\n  // ... similar para Series 4–15 (puedes completar)\n    \"Serie 4\": [\n    // solo nombres de ejemplo\n    \"painter\", \"scientist\", \"nuclear officer\", \"hockey player\", \"ice skater\", \"kimono\",\n    \"Gnome \", \"monster \", \"musketeer\", \"rocker\", \"Skateboard\", \"ootball player\",\n    \"surfer gir\", \"Viking\", \"werewolf\"\n  ],\n};\n\nlet id = 1;\nObject.entries(seriesData).forEach(([serie, nombres]) => {\n  nombres.slice(0, 16).forEach((nombre, index) => {\n    minifigures.push({\n      id: id++,\n      serie,\n      nombre,\n      año: 2010 + parseInt(serie.replace(/\\D/g, '')), // aproximado\n      estado: \"\",\n      comentarios: \"\",\n      imagen: `/images/${serie.replace(\" \", \"\").toLowerCase()}-${index+1}.png`\n    });\n  });\n});\n\n// Orden natural por número de serie\nminifigures.sort((a, b) => {\n  const numA = parseInt(a.serie.replace(/\\D/g, '')) || 0;\n  const numB = parseInt(b.serie.replace(/\\D/g, '')) || 0;\n  return numA - numB;\n});\n\nexport default minifigures;\n"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG,EAAE;;AAEtB;AACA,MAAMC,UAAU,GAAG;EACjB,SAAS,EAAE,CACT,eAAe,EAAE,aAAa,EAAE,SAAS,EAAE,cAAc,EACzD,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,kBAAkB,EAC/C,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EACxC,UAAU,EAAE,WAAW,EAAE,gBAAgB,EAAE,QAAQ,CACpD;EACD,SAAS,EAAE;EACT;EACA,eAAe,EAAE,cAAc,EAAE,eAAe,EAAE,iBAAiB,EACnE,iBAAiB,EAAE,cAAc,EAAE,iBAAiB,EAAE,eAAe,EACrE,kBAAkB,EAAE,iBAAiB,EAAE,eAAe,EAAE,YAAY,EACpE,SAAS,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,OAAO,CAC3D;EACD,SAAS,EAAE;EACT;EACA,kBAAkB,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE,UAAU,EACzE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAC3D,WAAW,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,CAC7C;EACD;EACE,SAAS,EAAE;EACX;EACA,SAAS,EAAE,WAAW,EAAE,iBAAiB,EAAE,eAAe,EAAE,YAAY,EAAE,QAAQ,EAClF,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,gBAAgB,EAC3E,YAAY,EAAE,QAAQ,EAAE,UAAU;AAEtC,CAAC;AAED,IAAIC,EAAE,GAAG,CAAC;AACVC,MAAM,CAACC,OAAO,CAACH,UAAU,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,KAAK,EAAEC,OAAO,CAAC,KAAK;EACvDA,OAAO,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACH,OAAO,CAAC,CAACI,MAAM,EAAEC,KAAK,KAAK;IAC9CV,WAAW,CAACW,IAAI,CAAC;MACfT,EAAE,EAAEA,EAAE,EAAE;MACRI,KAAK;MACLG,MAAM;MACNG,GAAG,EAAE,IAAI,GAAGC,QAAQ,CAACP,KAAK,CAACQ,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;MAAE;MAChDC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE,EAAE;MACfC,MAAM,EAAE,WAAWX,KAAK,CAACQ,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACI,WAAW,CAAC,CAAC,IAAIR,KAAK,GAAC,CAAC;IACpE,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAV,WAAW,CAACmB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;EACzB,MAAMC,IAAI,GAAGT,QAAQ,CAACO,CAAC,CAACd,KAAK,CAACQ,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC;EACtD,MAAMS,IAAI,GAAGV,QAAQ,CAACQ,CAAC,CAACf,KAAK,CAACQ,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC;EACtD,OAAOQ,IAAI,GAAGC,IAAI;AACpB,CAAC,CAAC;AAEF,eAAevB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}